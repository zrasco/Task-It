@model IEnumerable<TaskItSite.Models.Task>

@{
    ViewData["Title"] = "List";
}

<head>
    <style>
        button.accordion {
            background-color: #eee;
            color: #444;
            cursor: pointer;
            padding: 18px;
            width: 90%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            transition: 0.4s;
        }
        button.accordionRed {
            background-color: #ff7070;
            color: #444;
            cursor: pointer;
            padding: 18px;
            width: 90%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            transition: 0.4s;
        }
        button.accordionGreen {
            background-color: #11d839;
            color: #444;
            cursor: pointer;
            padding: 18px;
            width: 90%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            transition: 0.4s;
        }

            button.accordion.active, button.accordion:hover {
                background-color: #ccc;
            }
        button.accordionRed.active, button.accordionRed:hover {
            background-color: #ffa0a0;
        }
        button.accordionGreen.active, button.accordionGreen:hover {
            background-color: #13f23f;
        }
        div.panel {
            padding: 0 18px;
            background-color: white;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.2s ease-out;
            position:relative;
            
        }
        .bottomright {
            position: page;
            bottom: 0;
            right: 0;
        }
    </style>
    
        <link href="~/css/fullcalendar.css" rel="stylesheet" />
        <!-- calendar dependencies -->
        <script type="text/javascript" src="~/js/moment.js"></script>
        <script type="text/javascript" src="~/js/fullcalendar.js"></script>
        <script type="text/javascript" src="~/js/gcal.js"></script>


        <!-- Actual calendar stuff -->
        <script type="text/javascript" src="~/js/calendar.js"></script>
            
</head>

<body>
<p>

    <a asp-action="Create1">Create New</a>

</p>
    
@foreach (var item in Model)
{
    string IsItRed = "accordionRed";
    string varrr = "heyo@(item.ID)";
    int time = DateTime.Compare(item.DueDate, DateTime.Now);
    if (time < 0)
    {

        @Html.CheckBoxFor(m =>item.IsActive, new {
       onclick = "UpdateCustomer(this)",
       data_customerid = item.ID })

        <button class="@IsItRed">@Html.DisplayFor(modelItem => item.DueDate) @Html.DisplayFor(modelItem => item.Summary) </button>
        <div class="panel">
            <p>@Html.DisplayFor(modelItem => item.Description)</p>
            <p class="bottomright">
            <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
            <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                </p>
        </div>
    }
}

    @foreach (var item in Model)
    {
        string IsItRed = "accordion";
        int time = DateTime.Compare(item.DueDate, DateTime.Now);
        if (time >= 0)
        {

        @Html.CheckBoxFor(m =>item.IsActive, new { @onclick = "UpdateCustomer(this)",
                                                       data_customerid = item.ID })
            
        <button class="@IsItRed">@Html.DisplayFor(modelItem => item.DueDate) @Html.DisplayFor(modelItem => item.Summary) </button>
        <div class="panel">
            <p>@Html.DisplayFor(modelItem => item.Description)</p>
            <p class="bottomright">
                <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </p>
        </div>
       
        }
    }

    <div ng-app="TaskItApp" ng-controller="CalendarCtrl">
        <div id="calendar" ui-calendar="uiConfig.calendar" ng-model="eventSources"> </div>
    </div>
    <script>
        function UpdateCustomer(elem) {

    var isDone = $(elem).is(':checked');
        var cid = $(elem).data('customerid');
        
    $.ajax({
        type: 'POST',
        url: '@Url.Action("UpdateCustomer", "Tasks")',
        data: { check: isDone, customerId: cid },
        success: function (res) {
            console.log(res);
        }
             });

        }
    </script>
        <script>
            var acc = document.getElementsByClassName("accordion");
            var i;

            for (i = 0; i < acc.length; i++) {
                acc[i].onclick = function () {
                    this.classList.toggle("active");
                    var panel = this.nextElementSibling;
                    if (panel.style.maxHeight) {
                        panel.style.maxHeight = null;
                    } else {
                        panel.style.maxHeight = panel.scrollHeight + "px";
                    }
                }
            }
        </script>
    <script>
            var acc = document.getElementsByClassName("accordionRed");
            var i;

            for (i = 0; i < acc.length; i++) {
                acc[i].onclick = function () {
                    this.classList.toggle("active");
                    var panel = this.nextElementSibling;
                    if (panel.style.maxHeight) {
                        panel.style.maxHeight = null;
                    } else {
                        panel.style.maxHeight = panel.scrollHeight + "px";
                    }
                }
            }
    </script>

    <script>
        /**
        * TaskIt Calendar application
        * Exclusively the current user's calendar
        */
        var calendarDemoApp = angular.module('TaskItApp', ['ui.calendar', 'ui.bootstrap']);

         //controller to pull information from the database
         calendarDemoApp.controller('CalendarCtrl', ['$scope', '$http', 'uiCalendarConfig', function ($scope, $http, uiCalendarConfig) {

         //selected calendar
         $scope.SelectedEvent = null;
         var isFirstTime = true;

         //list of tasks
         $scope.tasks = [];

         //list of presented tasks via calendar (events)
         $scope.events = [];

         //Load events from server
         $scope.tasks = @Html.Raw(Json.Serialize(Model));
         console.log("in calendar", $scope.tasks);

         //go through each event and set calendar location for each
         $scope.events.slice(0, $scope.tasks.length);
         //push events onto the actual calendar
         angular.forEach($scope.tasks, function (value) {
                 $scope.events.push({
                     title: value.id,
                     description: value.description,
                     start:  new Date (value.dueDate),
                     allDay: true
             });
                 console.log(new Date(value.createdDate));
         });

         //configure calendar
         /* config object */
         $scope.uiConfig = {
             calendar: {
                 height: 450,
                 editable: true,
                 displayEventTime: true,
                 header: {
                     left: 'title',
                     center: '',
                     right: 'today prev,next'
                 },
                 //scope events
                 eventClick: function (event) {
                     $scope.SelectedEvent = event;
                 },
                 eventDrop: $scope.alertOnDrop,
                 eventResize: $scope.alertOnResize,
                 eventRender: $scope.eventRender
          }
         };
             /*push data to calendar*/
         $scope.eventSources = [$scope.events];
         }])
    </script>

    </body>
        @*
            <table class="table">
                <thead>
                    <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.CreatedDate)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.DueDate)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Summary)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Description)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.IsPin)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.UserId)
                            </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
            @foreach (var item in Model) {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreatedDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DueDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Summary)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IsPin)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UserId)
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                        </td>
                    </tr>
            }
                </tbody>
            </table>
        *@
